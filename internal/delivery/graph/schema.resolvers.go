package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"
	"errors"
	"sort"
	"time"

	"github.com/iqbalnzls/graph-ql/internal/delivery/graph/model"
	"github.com/iqbalnzls/graph-ql/internal/shared"
)

// CreateCharacter is the resolver for the createCharacter field.
func (r *mutationResolver) CreateCharacter(ctx context.Context, input model.CreateCharacterRequest) (resp *model.CharacterResponse, err error) {
	resp = &model.CharacterResponse{
		ID:        input.ID,
		Name:      input.Name,
		CreatedAt: time.Now().Format(time.RFC3339),
	}

	if len(r.Resolver.CharacterStore) == 0 {
		r.Resolver.CharacterStore = map[string]*model.CharacterResponse{
			input.ID: resp,
		}

		return
	}

	r.Resolver.CharacterStore[input.ID] = resp

	return
}

// FindByID is the resolver for the findByID field.
func (r *queryResolver) FindByID(ctx context.Context, id string) (*model.CharacterResponse, error) {
	d, ok := r.Resolver.CharacterStore[id]
	if !ok {
		return nil, errors.New("data not found")
	}

	return d, nil
}

// FindAll is the resolver for the findAll field.
func (r *queryResolver) FindAll(ctx context.Context, sortByID *string) ([]*model.CharacterResponse, error) {
	var input string
	resp := make([]*model.CharacterResponse, 0)

	input = shared.ASC.ToString()
	if sortByID != nil {
		input = *sortByID
	}

	for _, v := range r.Resolver.CharacterStore {
		resp = append(resp, v)
	}

	switch input {
	case shared.ASC.ToString():
		sort.Slice(resp, func(i, j int) bool {
			return resp[i].ID < resp[j].ID
		})
	case shared.DESC.ToString():
		sort.Slice(resp, func(i, j int) bool {
			return resp[i].ID > resp[j].ID
		})
	default:
		return nil, errors.New("invalid sorting value")
	}

	return resp, nil
}

// FindByName is the resolver for the findByName field.
func (r *queryResolver) FindByName(ctx context.Context, name string) (resp *model.CharacterResponse, err error) {
	for _, v := range r.Resolver.CharacterStore {
		if name == v.Name {
			resp = v
			return
		}
	}

	err = errors.New("data not found")

	return
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
